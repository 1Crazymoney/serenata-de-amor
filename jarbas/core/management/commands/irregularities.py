import csv
import lzma

from jarbas.core.management.commands import LoadCommand
from jarbas.core.models import Reimbursement


class Command(LoadCommand):
    help = 'Load Serenata de Amor irregularities dataset'
    count = 0
    filter_keys = ('applicant_id', 'document_id', 'year')

    def handle(self, *args, **options):
        self.date = options.get('dataset_version')
        self.source = options.get('source')
        self.update(self.irregularities)

    @property
    def irregularities(self):
        """Returns a Generator with a irregularities for each reimbursement."""
        dataset = self.get_dataset('irregularities')
        with lzma.open(dataset, mode='rt') as file_handler:
            for row in csv.DictReader(file_handler):
                yield self.serialize(row)

    def serialize(self, row):
        """
        Read the dict generated by DictReader and return two dictionaries, one
        to be used as filter to locate the reimbursement, another one with data
        from the irregularities.
        """

        unique_id = dict()
        for key in self.filter_keys:
            unique_id[key] = int(row[key])
            del row[key]

        probability = None
        if 'probability' in row:
            probability = float(row['probability'])
            del row['probability']

        suspicions = {k: self.to_bool(v) for k, v in row.items()}

        return unique_id, dict(probability=probability, suspicions=suspicions)

    @staticmethod
    def to_bool(string):
        if string in ('False', '0'):
            string = ''
        return bool(string)

    def update(self, irregularities):
        for filters, content in irregularities:
            Reimbursement.objects.filter(**filters).update(**content)
            self.count += 1
            print('{:,} reimbursements updated.'.format(self.count), end='\r')
