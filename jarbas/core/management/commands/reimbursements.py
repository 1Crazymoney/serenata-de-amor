import lzma

from django.utils.timezone import now
from reprint import output
from rows import import_from_csv
from rows.fields import FloatField, TextField

from jarbas.core.fields import DateField, IntegerField
from jarbas.core.management.commands import LoadCommand
from jarbas.core.models import Reimbursement


class Command(LoadCommand):
    help = 'Load Serenata de Amor reimbursements dataset'

    def handle(self, *args, **options):
        self.started_at = now()
        self.path = options['dataset']

        existing = Reimbursement.objects.count()
        print('Starting with {:,} reimbursements'.format(existing))
        self.count = {'updated': 0, 'created': 0, 'skip': 0}

        if options.get('drop', False):
            self.drop_all(Reimbursement)

        print('Loading {}'.format(self.path))
        with output() as status:
            status.change(self.status)
            self.create_or_update(self.reimbursements, status)

        self.mark_not_updated_reimbursements()

    @property
    def reimbursements(self):
        """Returns a Generator with a dict object for each row."""
        force_types = {
            'cnpj_cpf': TextField,
            'document_number': TextField,
            'leg_of_the_trip': TextField,
            'congressperson_id': IntegerField,
            'congressperson_document': IntegerField,
            'reimbursement_value_total': FloatField,
            'issue_date': DateField,
            'term': IntegerField,
            'term_id': IntegerField
        }
        with lzma.open(self.path) as file_handler:
            for row in import_from_csv(file_handler, force_types=force_types):
                as_dict = dict(row._asdict())  # _asdict returns OrderedDict
                yield self.rename(as_dict)

    @staticmethod
    def rename(reimbursement):
        """Read the dict generated by rows and fix some keys"""
        rename = (
            ('subquota_number', 'subquota_id'),
            ('reimbursement_value_total', 'total_reimbursement_value')
        )
        for old, new in rename:
            reimbursement[new] = reimbursement.pop(old)

        return reimbursement

    def create_or_update(self, reimbursements_as_dicts, status):
        for reimbursement in reimbursements_as_dicts:
            document_id = reimbursement.get('document_id')

            if not document_id:
                self.count['skip'] += 1
                status.change(self.status)
                continue

            _, created = Reimbursement.objects.update_or_create(
                document_id=document_id,
                defaults=reimbursement
            )

            key = 'created' if created else 'updated'
            self.count[key] += 1
            status.change(self.status)

    def mark_not_updated_reimbursements(self):
        qs = Reimbursement.objects.filter(last_update__lt=self.started_at)
        qs.update(available_in_latest_dataset=False)

    @property
    def status(self):
        label = '{}s'.format(self.get_model_name(Reimbursement)).lower()
        total = sum(map(self.count.get, self.count.keys()))
        output = [
            'Processed: {} lines'.format(total),
            'Updated: {} {}'.format(self.count['updated'], label),
            'Created: {} {}'.format(self.count['created'], label),
            'Skip: {} {}'.format(self.count['skip'], label),
        ]
        return output
